/// Arrow base styles
///
/// @param {Number} $z-index [2] - z-index value
@mixin arrow-base ($z-index: 2) {
	position: relative;

	&::after {
		content: "";
		display: block;
		width: 40px;
		height: 40px;
		border-style: solid;
		border-width: 0 0 2px 2px;
		transform: translate(-50%, 30%) rotate(-45deg);
		position: absolute;
		bottom: 0;
		left: calc(50% - 2px);
		z-index: $z-index;
	}
}

/// Arrow color styles
///
/// @param {Color} $border-color [$light-blue] - CSS color value
/// @param {Color} $bg-color [#FFF] - CSS color value
@mixin arrow-color(
	$border-color: $light-blue,
	$bg-color: #FFF
) {
	&::after {
		border-color: $border-color;
		background-color: $bg-color;
	}
}

/// Create an arrow below the current element
///
/// @param {Color} $border-color [$light-blue] - CSS color value
/// @param {Color} $bg-color [#FFF] - CSS color value
/// @param {Number} $z-index [2] - z-index value
@mixin arrow (
	$border-color: $light-blue,
	$bg-color: #FFF,
	$z-index: 2
) {
	@include arrow-base($z-index);
	@include arrow-color($border-color, $bg-color);
}

/// Create brackets on opposite sides of an element
///
/// @param {Color} $color [$light-blue] - CSS color value
/// @param {Number} $border-width [2px] - Width of the bracket line
/// @param {Number} $width [10px] - Length of the bracket arms
/// @param {String} $axis [x] - If 'x' the brackets will appear on the left and right; if 'y' they will appear above and below
/// @param {Number} $padding [rem-calc(10 20)] - Padding of the element which ensures its contents are far enough away from the brackets
@mixin brackets (
	$color: $light-blue,
	$border-width: 2px,
	$width: 10px,
	$axis: x,
	$padding: rem-calc(10 20)
) {
	position: relative;
	padding: $padding;

	&::before,
	&::after {
		flex: 0 0 auto;
		content: "";
		display: block;
		position: absolute;
		border: {
			color: $color;
			style: solid;
		}

		@if $axis == x {
			top: 0;
			height: 100%;
			width: $width;
		}
		@if $axis == y {
			left: 0;
			height: $width;
			width: 100%;
		}
	}

	&::before {
		@if $axis == x {
			left: 0;
			border-width: $border-width 0 $border-width $border-width;
		}
		@if $axis == y {
			top: 0;
			border-width: $border-width $border-width 0 $border-width;
		}
	}

	&::after {
		@if $axis == x {
			right: 0;
			border-width: $border-width $border-width $border-width 0;
		}
		@if $axis == y {
			bottom: 0;
			border-width: 0 $border-width $border-width $border-width;
		}
	}

	@include breakpoint(small only){
		padding: $width $width * 2;
	}
}

@mixin bracket-color ($color: $light-blue) {
	&::before,
	&::after {
		border-color: $color;
	}
}

/// Return value from Sass map, or $key if null
///
/// @param {Map} $map - CSS property name
/// @param {Key or Value} $key - Key name in $template-atts entry, or value
@function get-template-value($map, $key) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	} @else {
		@return $key;
	}
}

/// Style for page templates included in the $template-atts sass map variable
///
/// @param {Property} $p - CSS property name
/// @param {Key or Value} $key - Key name in $template-atts entry, or value
/// @param {Key} $pref-key - Key name in $template-atts entry
@mixin template-prop(
	$p,
	$key,
	$pref-key: false
) {
	@each $name, $map in $template-atts {
		.agency-#{$name} & {
			@if $pref-key and map-has-key($map, $pref-key) {
				#{$p}: map-get($map, $pref-key);
			} @else {
				#{$p}: get-template-value($map, $key);
			}
		}
	}
}

/// Creates bracket styles for page templates included in the $template-atts sass map variable
///
/// @param {Color} $color [color] - Key name in $template-atts entry, or color
/// @param {Color} $pref-color [false] - Key name in $template-atts entry
@mixin template-brackets (
	$color: color,
	$pref-color: false
) {
	@each $name, $map in $template-atts {
		.agency-#{$name} & {
			@if $pref-color and map-has-key($map, $pref-color) {
				@include bracket-color(get-template-value($map, $pref-color));
			} @else {
				@include bracket-color(get-template-value($map, $color));
			}
		}
	}
}

/// Creates arrow styles for page templates included in the $template-atts sass map variable
///
/// @param {Color} $border-color [color] - Key name in $template-atts entry, or color
/// @param {Color} $bg-color [color] - Key name in $template-atts entry, or color
@mixin template-arrows(
	$border-color: color,
	$bg-color: color
) {
	@each $name, $map in $template-atts {
		.agency-#{$name} & {
			@include arrow-color(get-template-value($map, $border-color), get-template-value($map, $bg-color));
		}
	}
}
